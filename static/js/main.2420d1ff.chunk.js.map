{"version":3,"sources":["VisualizerController.js","SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["VisualizerController","props","state","sortingAlgorithm","speed","size","barColor","pointerColor","sortedColor","onSelectingSortingAlgorithm","bind","onSelectingSpeed","onSelectingSize","onSelectingBarColor","onSelectingPointerColor","onSelectingSortedColor","randomize","sort","randomizeRef","React","createRef","sortRef","this","visualizerData","current","textContent","eventKey","event","setState","temp","update","controllerDataHandler","disabled","document","getElementById","className","Container","SplitButton","title","id","variant","onSelect","Dropdown","Item","Divider","Button","ref","onClick","Component","Tuple","first","second","operation","SortingVisualizer","arr","sorted","width","height","window","screen","controllerData","Set","parseInt","add","getRandomElement","Array","from","getColor","previousProps","previousState","cd","cocktailSort","heapSort","insertionSort","linearSort","mergeSortUtil","quickSortUtil","selectionSort","bubbleSort","newState","bars","getElementsByClassName","e","length","style","backgroundColor","visualizerDataHandler","n","i","j","innerHTML","eIndex","f","fIndex","gValue","gWidth","sleep","getSpeed","swapped","start","end","Math","floor","x","y","tempWidth","leftIndex","rightIndex","max","p","jValue","jWidth","g","graphics","slice","high","mergeSort","low","middle","merge","r","push","k","a","b","quickSort","pi","partition","pivot","m","ms","Promise","resolve","setTimeout","random","map","value","idx","key","getBarHeight","fontSize","getfontHeight","App","default","scrollIntoView","behavior","block","fluid","Row","Col","xl","lg","md","sm","xs","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2420d1ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport SplitButton from \"react-bootstrap/SplitButton\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport \"./VisualizerController.css\";\nclass VisualizerController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sortingAlgorithm: \"Bubble Sort\",\n      speed: \"Fast\",\n      size: \"20\",\n      barColor: \"Blue\",\n      pointerColor: \"Red\",\n      sortedColor: \"Green\"\n    };\n    this.onSelectingSortingAlgorithm =this.onSelectingSortingAlgorithm.bind(this);\n    this.onSelectingSpeed = this.onSelectingSpeed.bind(this);\n    this.onSelectingSize = this.onSelectingSize.bind(this);\n    this.onSelectingBarColor = this.onSelectingBarColor.bind(this);\n    this.onSelectingPointerColor = this.onSelectingPointerColor.bind(this);\n    this.onSelectingSortedColor = this.onSelectingSortedColor.bind(this);\n    this.randomize = this.randomize.bind(this);\n    this.sort = this.sort.bind(this);\n    this.randomizeRef = React.createRef();\n    this.sortRef = React.createRef();\n  }\n  componentDidUpdate() {\n    if (this.props.visualizerData === true) {\n      this.randomizeRef.current.textContent = \"Randomize Array\";\n    }\n  }\n  onSelectingSortingAlgorithm(eventKey, event) {\n    this.setState({\n      sortingAlgorithm: eventKey,\n    });\n  }\n  onSelectingSpeed(eventKey, event) {\n    this.setState({\n      speed: eventKey,\n    });\n  }\n  onSelectingSize(eventKey, event) {\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = true;\n    temp[\"size\"] = eventKey;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  onSelectingBarColor(eventKey, event) {\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = false;\n    temp[\"barColor\"] = eventKey;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  onSelectingPointerColor(eventKey, event) {\n    this.setState({\n      pointerColor: eventKey,\n    });\n  }\n  onSelectingSortedColor(eventKey, event) {\n    this.setState({\n      sortedColor: eventKey,\n    });\n  }\n  update() {\n    var temp = {\n      sortingAlgorithm: \"\",\n      speed: \"\",\n      size: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sortedColor: \"\",\n    };\n    temp.sortingAlgorithm = this.state.sortingAlgorithm;\n    temp.size = this.state.size;\n    temp.speed = this.state.speed;\n    temp.barColor = this.state.barColor;\n    temp.pointerColor = this.state.pointerColor;\n    temp.sortedColor = this.state.sortedColor;\n    return temp;\n  }\n  randomize() {\n    this.randomizeRef.current.textContent = \"Randomize Array\";\n    this.sortRef.current.disabled = false;\n    document.getElementById(\"speed\").disabled = false;\n    document.getElementById(\"size\").disabled = false;\n    document.getElementById(\"sortingAlogrithm\").disabled = false;\n    document.getElementById(\"barColor\").disabled = false;\n    document.getElementById(\"pointerColor\").disabled = false;\n    document.getElementById(\"sortedColor\").disabled = false;\n    let temp = this.update();\n    temp[\"sort\"] = false;\n    temp[\"randomize\"] = true;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  sort() {\n    this.randomizeRef.current.textContent = \"Stop & Randomize Array\";\n    this.sortRef.current.disabled = true;\n    document.getElementById(\"speed\").disabled = true;\n    document.getElementById(\"size\").disabled = true;\n    document.getElementById(\"sortingAlogrithm\").disabled = true;\n    document.getElementById(\"barColor\").disabled = true;\n    document.getElementById(\"pointerColor\").disabled = true;\n    document.getElementById(\"sortedColor\").disabled = true;\n    let temp = this.update();\n    temp[\"sort\"] = true;\n    temp[\"randomize\"] = false;\n    temp[\"sorted\"] = false;\n    this.setState(temp, function () {\n      this.props.controllerDataHandler(this.state);\n    });\n  }\n  render() {\n    return (\n      <div className=\"VisualizerController\">\n        <Container>\n            <SplitButton title={this.state.sortingAlgorithm} id=\"sortingAlogrithm\" variant=\"light\" onSelect={this.onSelectingSortingAlgorithm}>\n              <Dropdown.Item disabled>Sorting Algorithms</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Bubble Sort\">\n                Bubble Sort (Default)\n              </Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cocktail Sort\">\n                Cocktail Sort\n              </Dropdown.Item>\n              <Dropdown.Item eventKey=\"Heap Sort\">Heap Sort</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Insertion Sort\">\n                Insertion Sort\n              </Dropdown.Item>\n              <Dropdown.Item eventKey=\"Linear Sort\">Linear Sort</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Merge Sort\">Merge Sort</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Quick Sort\">Quick Sort</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Selection Sort\">\n                Selection Sort\n              </Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.speed}\n              id=\"speed\"\n              variant=\"light\"\n              onSelect={this.onSelectingSpeed}\n            >\n              <Dropdown.Item disabled>Speed Of Visualization</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Very Fast\">Very fast</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Fast\">Fast (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Normal\">Normal</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Slow\">Slow</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Very Slow\">Very Slow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.size}\n              id=\"size\"\n              variant=\"light\"\n              onSelect={this.onSelectingSize}\n            >\n              <Dropdown.Item disabled>Size Of Array</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"10\">10</Dropdown.Item>\n              <Dropdown.Item eventKey=\"15\">15</Dropdown.Item>\n              <Dropdown.Item eventKey=\"20\">20(Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"25\">25</Dropdown.Item>\n              <Dropdown.Item eventKey=\"30\">30</Dropdown.Item>\n              <Dropdown.Item eventKey=\"35\">35</Dropdown.Item>\n              <Dropdown.Item eventKey=\"40\">40</Dropdown.Item>\n              <Dropdown.Item eventKey=\"45\">45</Dropdown.Item>\n              <Dropdown.Item eventKey=\"50\">50</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.barColor}\n              id=\"barColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingBarColor}\n            >\n              <Dropdown.Item disabled>Color Of Bar</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.pointerColor}\n              id=\"pointerColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingPointerColor}\n            >\n              <Dropdown.Item disabled>Color Of Comparisions</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <SplitButton\n              title={this.state.sortedColor}\n              id=\"sortedColor\"\n              variant=\"light\"\n              onSelect={this.onSelectingSortedColor}\n            >\n              <Dropdown.Item disabled>Color Of Sorted Elements</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"Black\">Black</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Blue\">Blue</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Cyan\">Cyan</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Green\">Green (Default)</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Pink\">Pink</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Red\">Red</Dropdown.Item>\n              <Dropdown.Item eventKey=\"Yellow\">Yellow</Dropdown.Item>\n            </SplitButton>\n            &nbsp;&nbsp;&nbsp;\n            <Button\n              ref={this.randomizeRef}\n              size=\"lg\"\n              variant=\"danger\"\n              onClick={this.randomize}\n            >\n              Randomize Array\n            </Button>\n            &nbsp;&nbsp;&nbsp;\n            <Button\n              ref={this.sortRef}\n              size=\"lg\"\n              variant=\"success\"\n              onClick={this.sort}\n            >\n              Sort !\n            </Button>\n          \n        </Container>\n      </div>\n    );\n  }\n}\nexport default VisualizerController;\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\n\nclass Tuple {\n  constructor(first, second, operation) {\n    this.first = first;\n    this.second = second;\n    this.operation = operation;\n  }\n}\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [],\n      sortingAlgorithm: \"\",\n      size: \"\",\n      speed: \"\",\n      barColor: \"\",\n      pointerColor: \"\",\n      sort: false,\n      randomize: false,\n    };\n    this.sorted = false;\n    this.width = 0;\n    this.height = 0;\n  }\n\n  componentDidMount() {\n    this.width = window.screen.width;\n    this.height = window.screen.height;\n    let controllerData = this.props.controllerData;\n    let temp = new Set();\n    // We took set because no bar should have same size\n    while (temp.size !== parseInt(controllerData[\"size\"])) {\n      temp.add(this.getRandomElement());\n    }\n    // Using while loop such that random numbers should be filled in array\n    temp = Array.from(temp);\n    this.setState({\n      arr: temp,\n      sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n      size: controllerData[\"size\"],\n      speed: controllerData[\"speed\"],\n      barColor: this.getColor(controllerData[\"barColor\"]),\n      pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n      sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n      sort: controllerData[\"sort\"],\n      randomize: controllerData[\"randomize\"],\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousProps.controllerData !== this.props.controllerData) {\n      let controllerData = this.props.controllerData;\n      let cd = {};\n      if (controllerData[\"sort\"] === true) {\n        cd = {\n          sortingAlgorithm: controllerData[\"sortingAlgorithm\"],\n          size: controllerData[\"size\"],\n          speed: controllerData[\"speed\"],\n          barColor: this.getColor(controllerData[\"barColor\"]),\n          pointerColor: this.getColor(controllerData[\"pointerColor\"]),\n          sortedColor: this.getColor(controllerData[\"sortedColor\"]),\n          sort: controllerData[\"sort\"],\n          randomize: controllerData[\"randomize\"],\n        };\n        switch (controllerData.sortingAlgorithm) {\n          case \"Cocktail Sort\":\n            this.setState(cd, function () {\n              this.cocktailSort();\n            });\n            break;\n\n          case \"Heap Sort\":\n            this.setState(cd, function () {\n              this.heapSort();\n            });\n            break;\n\n          case \"Insertion Sort\":\n            this.setState(cd, function () {\n              this.insertionSort();\n            });\n            break;\n\n          case \"Linear Sort\":\n            this.setState(cd, function () {\n              this.linearSort();\n            });\n            break;\n\n          case \"Merge Sort\":\n            this.setState(cd, function () {\n              this.mergeSortUtil();\n            });\n            break;\n\n          case \"Quick Sort\":\n            this.setState(cd, function () {\n              this.quickSortUtil();\n            });\n            break;\n\n          case \"Selection Sort\":\n            this.setState(cd, function () {\n              this.selectionSort();\n            });\n            break;\n\n          default:\n            this.setState(cd, function () {\n              this.bubbleSort();\n            });\n            break;\n        }\n      } else {\n        let newState = {};\n        let temp = new Set();\n        if (parseInt(this.state[\"size\"]) !== parseInt(controllerData[\"size\"])) {\n          newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n          newState[\"size\"] = parseInt(controllerData[\"size\"]);\n          newState[\"speed\"] = controllerData[\"speed\"];\n          newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n          newState[\"pointerColor\"] = this.getColor(\n            controllerData[\"pointerColor\"]\n          );\n          newState[\"sortedColor\"] = this.getColor(\n            controllerData[\"sortedColor\"]\n          );\n          newState[\"randomize\"] = controllerData[\"randomize\"];\n          newState[\"sort\"] = controllerData[\"sort\"];\n          while (temp.size !== newState[\"size\"]) {\n            temp.add(this.getRandomElement());\n          }\n          temp = Array.from(temp);\n          newState[\"arr\"] = temp;\n        } else {\n          if (controllerData[\"randomize\"] === true) {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"randomize\"] = controllerData[\"randomize\"];\n            newState[\"sort\"] = controllerData[\"sort\"];\n            while (temp.size !== newState[\"size\"]) {\n              temp.add(this.getRandomElement());\n            }\n            temp = Array.from(temp);\n            newState[\"arr\"] = temp;\n            let bars = document.getElementsByClassName(\"array-bar\");\n            for (let e = 0; e < bars.length; e++)\n              bars[e].style.backgroundColor = newState[\"barColor\"];\n          } else {\n            newState[\"sortingAlgorithm\"] = controllerData[\"sortingAlgorithm\"];\n            newState[\"size\"] = parseInt(controllerData[\"size\"]);\n            newState[\"barColor\"] = this.getColor(controllerData[\"barColor\"]);\n            newState[\"pointerColor\"] = this.getColor(\n              controllerData[\"pointerColor\"]\n            );\n            newState[\"sortedColor\"] = this.getColor(\n              controllerData[\"sortedColor\"]\n            );\n            newState[\"speed\"] = controllerData[\"speed\"];\n            newState[\"arr\"] = this.state.arr;\n          }\n        }\n        this.setState(newState);\n      }\n    }\n  } //component did update ends\n\n\n  //--------------------------SORTING ALGORITHMS STARTS FROM HERE--------------------------------\n  async bubbleSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let e, f, eIndex, fIndex;\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        bars[j + 1].style.backgroundColor = this.state.pointerColor;\n        e = parseInt(bars[j].innerHTML);\n        eIndex = j;\n        f = parseInt(bars[j + 1].innerHTML);\n        fIndex = j + 1;\n        if (e > f) {\n          let gValue = bars[eIndex].innerHTML;\n          let gWidth = bars[eIndex].style.width;\n          bars[eIndex].innerHTML = bars[fIndex].innerHTML;\n          bars[eIndex].style.width = bars[fIndex].style.width;\n          bars[fIndex].innerHTML = gValue;\n          bars[fIndex].style.width = gWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n        }\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[j + 1].style.backgroundColor = this.state.barColor;\n      }\n      bars[n - i - 1].style.backgroundColor = this.state.sortedColor;\n    }\n    bars[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async cocktailSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let swapped = true;\n    let start = 0;\n    let end = n - 1;\n    let gValue, gWidth;\n    while (swapped) {\n      swapped = false;\n      for (let i = start; i < end; ++i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      if (!swapped) break;\n      swapped = false;\n      bars[end].style.backgroundColor = this.state.sortedColor;\n      --end;\n      for (let i = end - 1; i >= start; --i) {\n        if (parseInt(bars[i].innerHTML) > parseInt(bars[i + 1].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[i + 1].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[i + 1].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[i + 1].innerHTML);\n          bars[i].style.width = bars[i + 1].style.width;\n          bars[i + 1].innerHTML = gValue;\n          bars[i + 1].style.width = gWidth;\n          swapped = true;\n        }\n      }\n      bars[start].style.backgroundColor = this.state.sortedColor;\n      ++start;\n    }\n    let i = start;\n    let j = end;\n    while (i <= j) {\n      bars[j].style.backgroundColor = this.state.sortedColor;\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n      j--;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async heapSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let temp, tempWidth;\n    let leftIndex, rightIndex, x, y;\n    let end;\n    //building heap\n    for (let e = 1; e < arr.length; e++) {\n      let i = e;\n      while (i > 0) {\n        if (\n          parseInt(arr[i].innerHTML) >\n          parseInt(arr[Math.floor((i - 1) / 2)].innerHTML)\n        ) {\n          x = i;\n          y = Math.floor((i - 1) / 2);\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = y;\n        } else {\n          break;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    //heapify\n    for (let e = arr.length - 1; e > 0; e--) {\n      arr[0].style.backgroundColor = this.state.pointerColor;\n      arr[e].style.backgroundColor = this.state.pointerColor;\n      temp = arr[0].innerHTML;\n      tempWidth = arr[0].style.width;\n      arr[0].innerHTML = arr[e].innerHTML;\n      arr[0].style.width = arr[e].style.width;\n      arr[e].innerHTML = temp;\n      arr[e].style.width = tempWidth;\n      await this.sleep(this.getSpeed(this.state.speed));\n      arr[0].style.backgroundColor = this.state.barColor;\n      arr[e].style.backgroundColor = this.state.barColor;\n      end = e - 1;\n      let i = 0;\n      while (i <= end) {\n        leftIndex = 2 * i + 1;\n        if (leftIndex > end) break;\n        rightIndex = 2 * i + 2;\n        if (rightIndex > end) rightIndex = leftIndex;\n        if (\n          parseInt(arr[i].innerHTML) >=\n          Math.max(\n            parseInt(arr[leftIndex].innerHTML),\n            parseInt(arr[rightIndex].innerHTML)\n          )\n        )\n          break;\n        if (\n          parseInt(arr[leftIndex].innerHTML) >=\n          parseInt(arr[rightIndex].innerHTML)\n        ) {\n          x = i;\n          y = leftIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          await this.sleep(this.getSpeed(this.state.speed));\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = leftIndex;\n        } else {\n          x = i;\n          y = rightIndex;\n          arr[x].style.backgroundColor = this.state.pointerColor;\n          arr[y].style.backgroundColor = this.state.pointerColor;\n          temp = arr[x].innerHTML;\n          tempWidth = arr[x].style.width;\n          arr[x].innerHTML = arr[y].innerHTML;\n          arr[x].style.width = arr[y].style.width;\n          arr[y].innerHTML = temp;\n          arr[y].style.width = tempWidth;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          arr[x].style.backgroundColor = this.state.barColor;\n          arr[y].style.backgroundColor = this.state.barColor;\n          i = rightIndex;\n        }\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n      arr[e].style.backgroundColor = this.state.sortedColor;\n    }\n    arr[0].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async insertionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let p, g, gValue, gWidth, jValue, jWidth;\n    for (let i = 1; i <= n - 1; i++) {\n      p = i;\n      bars[i].style.backgroundColor = this.state.pointerColor;\n      gValue = parseInt(bars[p].innerHTML);\n      gWidth = bars[p].style.width;\n      for (let j = p - 1; j >= 0; j--, p--) {\n        jValue = parseInt(bars[j].innerHTML);\n        jWidth = bars[j].style.width;\n        g = j;\n        bars[g].style.backgroundColor = this.state.pointerColor;\n        if (gValue >= jValue) {\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[g].style.backgroundColor = this.state.sortedColor;\n          break;\n        }\n        bars[j + 1].innerHTML = jValue;\n        bars[j + 1].style.width = jWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[g].style.backgroundColor = this.state.sortedColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      bars[p].innerHTML = gValue;\n      bars[p].style.width = gWidth;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async linearSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let i, j, gValue, gWidth;\n    i = 0;\n    while (i <= n - 2) {\n      j = i + 1;\n      while (j <= n - 1) {\n        bars[i].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[i].innerHTML)) {\n          bars[i].style.backgroundColor = this.state.pointerColor;\n          bars[j].style.backgroundColor = this.state.pointerColor;\n          if (this.state.randomize === true) return;\n          await this.sleep(this.getSpeed(this.state.speed));\n          if (this.state.randomize === true) return;\n          bars[i].style.backgroundColor = this.state.barColor;\n          bars[j].style.backgroundColor = this.state.barColor;\n          gValue = parseInt(bars[i].innerHTML);\n          gWidth = bars[i].style.width;\n          bars[i].innerHTML = parseInt(bars[j].innerHTML);\n          bars[i].style.width = bars[j].style.width;\n          bars[j].innerHTML = gValue;\n          bars[j].style.width = gWidth;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[j].style.backgroundColor = this.state.barColor;\n        bars[i].style.backgroundColor = this.state.barColor;\n        j++;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      i++;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  async mergeSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let graphics = [];\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    this.mergeSort(arr, low, high, graphics);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        bars[graphics[i].first].innerHTML = graphics[i].second;\n        bars[graphics[i].first].style.width = graphics[i].second + \"px\";\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n      }\n      if (this.state.randomize === true) return;\n      await this.sleep(this.getSpeed(this.state.speed));\n      if (this.state.randomize === true) return;\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  mergeSort(arr, low, high, graphics) {\n    if (low >= high) return;\n    var middle = Math.floor((low + high) / 2);\n    this.mergeSort(arr, low, middle, graphics);\n    this.mergeSort(arr, middle + 1, high, graphics);\n    this.merge(arr, low, high, graphics);\n  }\n\n  merge(arr, low, high, graphics) {\n    let middle = Math.floor((low + high) / 2);\n    let temp = new Array(high - low + 1);\n    let i = low;\n    let j = middle + 1;\n    let r = 0;\n    while (i <= middle && j <= high) {\n      graphics.push(new Tuple(i, j, \"add\"));\n      graphics.push(new Tuple(i, j, \"remove\"));\n      if (arr[i] <= arr[j]) {\n        temp[r] = arr[i];\n        r++;\n        i++;\n      } else {\n        temp[r] = arr[j];\n        r++;\n        j++;\n      }\n    }\n    while (i <= middle) {\n      graphics.push(new Tuple(i, i, \"add\"));\n      graphics.push(new Tuple(i, i, \"remove\"));\n      temp[r] = arr[i];\n      r++;\n      i++;\n    }\n    while (j <= high) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      graphics.push(new Tuple(j, j, \"remove\"));\n      temp[r] = arr[j];\n      r++;\n      j++;\n    }\n    i = low;\n    for (let k = 0; k < temp.length; ) {\n      graphics.push(new Tuple(i, temp[k], \"swap\"));\n      arr[i] = temp[k];\n      i++;\n      k++;\n    }\n  }\n\n  async quickSortUtil() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let arr = this.state.arr.slice();\n    let low = 0;\n    let high = arr.length - 1;\n    let graphics = [];\n    let gValue, gWidth;\n    let sorted = this.state.arr.slice().sort(function (a, b) {\n      return a - b;\n    });\n    this.quickSort(arr, low, high, graphics, sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < graphics.length; i++) {\n      if (graphics[i].operation === \"add\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.pointerColor;\n        bars[graphics[i].second].style.backgroundColor =\n          this.state.pointerColor;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n      if (graphics[i].operation === \"fix\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.sortedColor;\n        bars[graphics[i].second].style.backgroundColor = this.state.sortedColor;\n      }\n      if (graphics[i].operation === \"remove\") {\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n        bars[graphics[i].first].style.backgroundColor = this.state.barColor;\n      }\n      if (graphics[i].operation === \"swap\") {\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n        gValue = bars[graphics[i].first].innerHTML;\n        gWidth = bars[graphics[i].first].style.width;\n        bars[graphics[i].first].innerHTML = bars[graphics[i].second].innerHTML;\n        bars[graphics[i].first].style.width =\n          bars[graphics[i].second].style.width;\n        bars[graphics[i].second].innerHTML = gValue;\n        bars[graphics[i].second].style.width = gWidth;\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed) / 2);\n        if (this.state.randomize === true) return;\n      }\n    }\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  quickSort(arr, low, high, graphics, sorted) {\n    if (low < high) {\n      let pi = this.partition(arr, low, high, graphics, sorted);\n      this.quickSort(arr, low, pi - 1, graphics, sorted);\n      this.quickSort(arr, pi + 1, high, graphics, sorted);\n    }\n  }\n\n  partition(arr, low, high, graphics, sorted) {\n    let g;\n    let pivot = arr[high];\n    let i = low - 1;\n    graphics.push(new Tuple(high, high, \"add\"));\n    for (let j = low; j <= high - 1; j++) {\n      graphics.push(new Tuple(j, j, \"add\"));\n      if (arr[j] < pivot) {\n        i++;\n        g = arr[i];\n        arr[i] = arr[j];\n        arr[j] = g;\n        graphics.push(new Tuple(i, j, \"add\"));\n        graphics.push(new Tuple(i, j, \"remove\"));\n        graphics.push(new Tuple(i, j, \"swap\"));\n      }\n      graphics.push(new Tuple(j, j, \"remove\"));\n    }\n    g = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = g;\n    graphics.push(new Tuple(i + 1, high, \"add\"));\n    graphics.push(new Tuple(i + 1, high, \"remove\"));\n    graphics.push(new Tuple(i + 1, high, \"swap\"));\n    graphics.push(new Tuple(high, high, \"remove\"));\n    for (let k = 0; k < arr.length; k++) {\n      if (arr[k] === sorted[k]) {\n        graphics.push(new Tuple(k, k, \"fix\"));\n      }\n    }\n    graphics.push(new Tuple(i + 1, i + 1, \"fix\"));\n    return i + 1;\n  }\n\n  async selectionSort() {\n    this.sorted = false;\n    this.props.visualizerDataHandler(this.sorted);\n    let bars = document.getElementsByClassName(\"array-bar\");\n    let n = bars.length;\n    let m, r, gValue, gWidth;\n    for (let i = 0; i < n - 1; i++) {\n      m = i;\n      for (let j = i + 1; j < n; j++) {\n        r = m;\n        bars[r].style.backgroundColor = this.state.pointerColor;\n        bars[j].style.backgroundColor = this.state.pointerColor;\n        if (parseInt(bars[j].innerHTML) < parseInt(bars[m].innerHTML)) {\n          m = j;\n        }\n        if (this.state.randomize === true) return;\n        await this.sleep(this.getSpeed(this.state.speed));\n        if (this.state.randomize === true) return;\n        bars[r].style.backgroundColor = this.state.barColor;\n        bars[j].style.backgroundColor = this.state.barColor;\n      }\n      bars[i].style.backgroundColor = this.state.sortedColor;\n      gWidth = bars[i].style.width;\n      gValue = parseInt(bars[i].innerHTML);\n      bars[i].innerHTML = parseInt(bars[m].innerHTML);\n      bars[i].style.width = bars[m].style.width;\n      bars[m].innerHTML = gValue;\n      bars[m].style.width = gWidth;\n    }\n    bars[n - 1].style.backgroundColor = this.state.sortedColor;\n    this.sorted = true;\n    this.props.visualizerDataHandler(this.sorted);\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  getSpeed(speed) {\n    switch (speed) {\n      case \"Very Fast\":\n        return 25;\n      case \"Normal\":\n        return 250;\n      case \"Slow\":\n        return 500;\n      case \"Very Slow\":\n        return 1000;\n      default:\n        return 100;\n    }\n  }\n\n  getColor(barColor) {\n    switch (barColor) {\n      case \"Black\":\n        return \"#000000\";\n      case \"Cyan\":\n        return \"#00e6e6\";\n      case \"Green\":\n        return \"#4BB543\";\n      case \"Pink\":\n        return \"#e600e6\";\n      case \"Red\":\n        return \"#cc0000\";\n      case \"Yellow\":\n        return \"#cccc00\";\n      default:\n        return \"#000050\";\n    }\n  }\n\n  getBarHeight() {\n    let height =\n      (this.height - 150 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return height;\n  }\n\n  getfontHeight() {\n    let fontHeight =\n      (this.height - 370 - parseInt(this.state.size) * 5) /\n      parseInt(this.state.size);\n    return fontHeight - 3;\n  }\n\n  getRandomElement() {\n    var max = 0;\n    var min = 50;\n    if (this.width < 768) max = (this.width * 8) / 10;\n    else max = (this.width * 6) / 10;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  render() {\n    return (\n      <div id=\"barView\">\n        {this.state.arr.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              width: `${value + 10}px`,\n              backgroundColor: `${this.state.barColor}`,\n              height: `${this.getBarHeight()}px`,\n              fontSize: `${this.getfontHeight()}px`,\n            }}\n          >\n            {value}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport VisualizerController from \"./VisualizerController.js\";\nimport SortingVisualizer from \"./SortingVisualizer.js\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      default: {\n        sortingAlgorithm: \"Bubble Sort\",\n        size: \"20\",\n        speed: \"Fast\",\n        barColor: \"Blue\",\n        pointerColor: \"Red\",\n        sortedColor: \"Green\",\n        sort: false,\n        randomize: true,\n      },\n      sorted: false,\n    };\n  }\n  controllerDataHandler = (e) => {\n    this.setState(\n      {\n        default: {\n          sortingAlgorithm: e[\"sortingAlgorithm\"],\n          size: e[\"size\"],\n          speed: e[\"speed\"],\n          barColor: e[\"barColor\"],\n          pointerColor: e[\"pointerColor\"],\n          sortedColor: e[\"sortedColor\"],\n          sort: e[\"sort\"],\n          randomize: e[\"randomize\"],\n        },\n        sorted: false,\n      },\n      function () {\n        if (e[\"sort\"] === true) {\n          var element = document.getElementById(\"sortingVisualizer\");\n          element.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n        }\n      }\n    );\n  };\n  visualizerDataHandler = (e) => {\n    this.setState({ sorted: e });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <h3>Sorting Visualizer</h3>\n              <VisualizerController controllerDataHandler={this.controllerDataHandler} visualizerData={this.state.sorted}>\n                {this.state.sorted}\n              </VisualizerController>\n            </Col>\n          </Row>\n          <Row xl={2} lg={2} md={2} sm={1} xs={1}>\n            <Col id=\"sortingVisualizer\">\n              <SortingVisualizer visualizerDataHandler={this.visualizerDataHandler} controllerData={this.state.default}></SortingVisualizer>\n            </Col>\n          </Row>\n          \n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}